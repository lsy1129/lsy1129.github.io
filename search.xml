<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022/07/11-2022/07/16组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/july/2-secondweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/july/2-secondweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-07-x2F-11分享"><a href="#2022-x2F-07-x2F-11分享" class="headerlink" title="2022/07/11分享"></a>2022/07/11分享</h2><p>vue3：不需要响应式的引用类型数据用shallowRef定义</p><img src="/lsyBlog/2022/07/18/share/2022/july/2-secondweek/1.png" class=""><h2 id="2022-x2F-07-x2F-12分享"><a href="#2022-x2F-07-x2F-12分享" class="headerlink" title="2022/07/12分享"></a>2022/07/12分享</h2><p>vue3实现传送门(同ReactDOM.createPortal)：<br>teleport为vue3新增的内置组件</p><img src="/lsyBlog/2022/07/18/share/2022/july/2-secondweek/2.png" class=""><p>常用语实现modal或message类组件的封装；</p><h2 id="2022-x2F-07-x2F-13分享"><a href="#2022-x2F-07-x2F-13分享" class="headerlink" title="2022/07/13分享"></a>2022/07/13分享</h2><p>在 3.x 中，自定义组件上的 v-model 相当于传递了 modelValue prop 并接管抛出的 update:modelValue 事件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 简写: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span>  <span class="token attr-name">:modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">@update:</span>modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle = $event<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若须要更改 model 名称，而不是更改组件内的 model 选项，那么当初咱们能够将一个 argument 传递给 model：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 简写: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageTitle = $event<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-07-x2F-14分享"><a href="#2022-x2F-07-x2F-14分享" class="headerlink" title="2022/07/14分享"></a>2022/07/14分享</h2><p>vue3重定向组件（协同平台公共入口，携token直接登录问题管理平台）：</p><img src="/lsyBlog/2022/07/18/share/2022/july/2-secondweek/3.png" class=""><h2 id="2022-x2F-07-x2F-15分享"><a href="#2022-x2F-07-x2F-15分享" class="headerlink" title="2022/07/15分享"></a>2022/07/15分享</h2><h3 id="less变量的定义及使用："><a href="#less变量的定义及使用：" class="headerlink" title="less变量的定义及使用："></a>less变量的定义及使用：</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@link-color<span class="token punctuation">:</span></span>  #428bca<span class="token punctuation">;</span> <span class="token comment">// sea blue</span><span class="token variable">@link-color-hover<span class="token punctuation">:</span></span>  <span class="token function">darken</span><span class="token punctuation">(</span><span class="token variable">@link-color</span><span class="token punctuation">,</span> 10%<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">a,.link</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@link-color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:hover</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@link-color-hover</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.widget</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">@link-color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-07-x2F-16分享"><a href="#2022-x2F-07-x2F-16分享" class="headerlink" title="2022/07/16分享"></a>2022/07/16分享</h2><p>vue3 异步组件&amp;加载过程中的占位组件，内置组件Suspense的使用</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">"showButton"</span><span class="token operator">&gt;</span>展示异步组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isShowButton"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>Suspense<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>template #<span class="token keyword">default</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>AsyncButton<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>AsyncButton<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>template #fallback<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>组件加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> AsyncButton <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/AsyncButton.vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isShowButton <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">showButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      isShowButton<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      isShowButton<span class="token punctuation">,</span>      showButton<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue3 </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/07/04-2022/07/08组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/july/1-firstweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/july/1-firstweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-07-x2F-04分享"><a href="#2022-x2F-07-x2F-04分享" class="headerlink" title="2022/07/04分享"></a>2022/07/04分享</h2><p>导出文件时（responseType：arraybuffer），会存在没有数据或者超出最大导出条数限制，可以借助try…catch…给出后端返回的数据 </p><img src="/lsyBlog/2022/07/18/share/2022/july/1-firstweek/1.png" class=""><h2 id="2022-x2F-07-x2F-05分享"><a href="#2022-x2F-07-x2F-05分享" class="headerlink" title="2022/07/05分享"></a>2022/07/05分享</h2><h3 id="js运行机制："><a href="#js运行机制：" class="headerlink" title="js运行机制："></a>js运行机制：</h3><img src="/lsyBlog/2022/07/18/share/2022/july/1-firstweek/2.png" class=""><p>输出结果的顺序为：2，4，5，10，8，9，3，6，1，7</p><h2 id="2022-x2F-07-x2F-06分享"><a href="#2022-x2F-07-x2F-06分享" class="headerlink" title="2022/07/06分享"></a>2022/07/06分享</h2><h3 id="数组交集，并集，差集"><a href="#数组交集，并集，差集" class="headerlink" title="数组交集，并集，差集"></a>数组交集，并集，差集</h3><img src="/lsyBlog/2022/07/18/share/2022/july/1-firstweek/3.png" class=""><h2 id="2022-x2F-07-x2F-07分享"><a href="#2022-x2F-07-x2F-07分享" class="headerlink" title="2022/07/07分享"></a>2022/07/07分享</h2><h3 id="判断数组是不是每一项都满足："><a href="#判断数组是不是每一项都满足：" class="headerlink" title="判断数组是不是每一项都满足："></a>判断数组是不是每一项都满足：</h3><p>普通数组:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="判断数组是不是有一项满足："><a href="#判断数组是不是有一项满足：" class="headerlink" title="判断数组是不是有一项满足："></a>判断数组是不是有一项满足：</h3><p>普通数组:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2022-x2F-07-x2F-08分享"><a href="#2022-x2F-07-x2F-08分享" class="headerlink" title="2022/07/08分享"></a>2022/07/08分享</h2><h3 id="动态表单的校验"><a href="#动态表单的校验" class="headerlink" title="动态表单的校验"></a>动态表单的校验</h3><img src="/lsyBlog/2022/07/18/share/2022/july/1-firstweek/4.png" class="">]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/06/27-2022/07/01组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-06-x2F-27分享"><a href="#2022-x2F-06-x2F-27分享" class="headerlink" title="2022/06/27分享"></a>2022/06/27分享</h2><h3 id="Webpack构建单页面应用读取环境变量"><a href="#Webpack构建单页面应用读取环境变量" class="headerlink" title="Webpack构建单页面应用读取环境变量"></a>Webpack构建单页面应用读取环境变量</h3><p>1.docker拉取node、Ngix都有的镜像</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/1.png" class=""><p>2.使用webpack的definePlugin在打包的时候写入环境变量</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/2.png" class=""><p>3.代码中读取环境变量</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/3.png" class=""><h2 id="2022-x2F-06-x2F-28分享"><a href="#2022-x2F-06-x2F-28分享" class="headerlink" title="2022/06/28分享"></a>2022/06/28分享</h2><h3 id="Webpack提高构建性能"><a href="#Webpack提高构建性能" class="headerlink" title="Webpack提高构建性能"></a>Webpack提高构建性能</h3><p>loader应用于最少量的必要模块，减少loader转换和扫描的时间</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/4.png" class=""><h2 id="2022-x2F-06-x2F-29分享"><a href="#2022-x2F-06-x2F-29分享" class="headerlink" title="2022/06/29分享"></a>2022/06/29分享</h2><h3 id="Webpack提高构建性能-1"><a href="#Webpack提高构建性能-1" class="headerlink" title="Webpack提高构建性能"></a>Webpack提高构建性能</h3><p>dll,为更改不频繁的代码生成单独的编译结果。提高编译速度</p><p>1.单独编写dll打包配置文件，为固定且较大的包单独生成dll，使用webpack的dllPlugin</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/5.png" class=""><p>2.生成对应的dll和dll的包的映射文件如下</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/6.png" class=""><p>3.在打包文件通用manifest映射文件，使用生成的dll,并把dll文件打包到html中</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/7.png" class=""><h2 id="2022-x2F-06-x2F-30分享"><a href="#2022-x2F-06-x2F-30分享" class="headerlink" title="2022/06/30分享"></a>2022/06/30分享</h2><p>Webpack代码分离，避免打包出过大bundle。</p><p>入口分离，SplitChunksPlugin提取分离Chunk中公共部分</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/8.png" class=""><h2 id="2022-x2F-07-x2F-01分享"><a href="#2022-x2F-07-x2F-01分享" class="headerlink" title="2022/07/01分享"></a>2022/07/01分享</h2><p>webpack动态导入实现代码分离，预加载、预获取提高页面性能</p><img src="/lsyBlog/2022/07/18/share/2022/june/5-fifthweek/9.png" class=""><p>动态导入的模块，会打包生成独立的 bundle。</p><p>预获取prefetch,在当前页面chunk加载完后，利用网络空闲加载可能会被用户加载的内容，应用场景：<br>页面上点击按钮，弹窗展示另一个组件，预获取弹窗组件</p><p>预获取prefetch,在当前页面chunk加载完后，利用网络空闲加载可能会被用户加载的内容，应用场景：<br>页面上点击按钮，弹窗展示另一个组件，预获取弹窗组件</p><p>页面上需要引用很大包，例如图表库。<br>会在加载当前页面的同时加载独立库，会由两次请求，合并为一次请求</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/06/20-2022/06/25组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/june/4-fourthweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/june/4-fourthweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-06-x2F-20分享"><a href="#2022-x2F-06-x2F-20分享" class="headerlink" title="2022/06/20分享"></a>2022/06/20分享</h2><h3 id="reduce的用法"><a href="#reduce的用法" class="headerlink" title="reduce的用法"></a>reduce的用法</h3><p>reduce() 方法对数组中的每个元素执行一个由您提供的reduce函数(升序执行)，将其结果汇总为单个返回值。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/**prev 必需。累计器累计回调的返回值; 表示上一次调用回调时的返回值，或者初始值 init;cur 必需。表示当前正在处理的数组元素；index 可选。表示当前正在处理的数组元素的索引，若提供 init 值，则起始索引为- 0，否则起始索引为1；arr 可选。表示原数组；init 可选。表示初始值。*/</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myOrderedArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    accumulator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> accumulator<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要是借助迭代功能实现数组的扩展，判断当前元素是否已经添加到数组中，如果不存在就从尾部添加；</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p> reduce() 是数组的归并方法，与 forEach()、map()、filter()等迭代方法一样都会对数组每一项进行遍历，但是reduce() 可同时将前面数组项遍历产生的结果与当前遍历项进行运算，这一点是其他迭代方法无法企及的。</p><h2 id="2022-x2F-06-x2F-21分享"><a href="#2022-x2F-06-x2F-21分享" class="headerlink" title="2022/06/21分享"></a>2022/06/21分享</h2><h3 id="watchEffect属性"><a href="#watchEffect属性" class="headerlink" title="watchEffect属性"></a>watchEffect属性</h3><p>watch 的套路是：既要指明监视的属性，也要指明监视的回调<br>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性<br>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值)，所以必须要写返回值</li><li>而watchEffect更注重的是过程（回调函数的函数体)，所以不用写返回值</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">,</span>watchEffect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Demo'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      job<span class="token operator">:</span><span class="token punctuation">{</span>        j1<span class="token operator">:</span><span class="token punctuation">{</span>          salary<span class="token operator">:</span><span class="token number">20</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> x1 <span class="token operator">=</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect所指定的回调执行了"</span><span class="token operator">+</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      person    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-06-x2F-22分享"><a href="#2022-x2F-06-x2F-22分享" class="headerlink" title="2022/06/22分享"></a>2022/06/22分享</h2><h3 id="vue3-在setup访问路由"><a href="#vue3-在setup访问路由" class="headerlink" title="vue3 在setup访问路由"></a>vue3 在setup访问路由</h3><blockquote><p>setup 里不能访问 this，不能再直接访问 this.$router 或 this.$route。（getCurrentInstance可以替代this但不推荐）<br>推荐：使用useRoute 函数和useRouter函数替代this.$route 和 this.$router</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter<span class="token punctuation">,</span> useRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">pushWithQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'search'</span><span class="token punctuation">,</span>        query<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token operator">...</span>route<span class="token punctuation">.</span>query<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span>script<span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-06-x2F-23分享"><a href="#2022-x2F-06-x2F-23分享" class="headerlink" title="2022/06/23分享"></a>2022/06/23分享</h2><h3 id="ref和reactive"><a href="#ref和reactive" class="headerlink" title="ref和reactive"></a>ref和reactive</h3><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>ref是一个函数，接受一个简单类型或者复杂类型的传入并返回一个响应式且可变的 ref 对象</p><ul><li>参数: 传入数据 所有数据类型都支持</li><li>返回值: 实现了响应式的数据</li></ul><p><em>注意：</em> 在 setup 中使用数据时必须要 .value</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><p>reactive是一个函数，接收一个普通的对象传入，把对象数据转化为响应式对象并返回，用于声明响应式数据的函数</p><ul><li>参数: 传入数据(必须是引用数据类型)</li><li>返回值: 实现了响应式的数据<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token function-variable function">hobby</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        refUsers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ref响应函数与reactive响应函数的区别"><a href="#ref响应函数与reactive响应函数的区别" class="headerlink" title="ref响应函数与reactive响应函数的区别"></a>ref响应函数与reactive响应函数的区别</h4>两个函数都是用于声明响应式数据的函数</li><li>ref支持基本数据类型与引用数据类型</li><li>reactive只支持引用数据类型</li></ul><p><em>注意：</em> ref 其实就是对 reactive 的一层包装，内部调用 reactive 生成一个响应式的对象, 在外面包一个对象</p><h2 id="2022-x2F-06-x2F-24分享"><a href="#2022-x2F-06-x2F-24分享" class="headerlink" title="2022/06/24分享"></a>2022/06/24分享</h2><h3 id="typescript类型断言"><a href="#typescript类型断言" class="headerlink" title="typescript类型断言"></a>typescript类型断言</h3><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Property 'bar' does not exist on type '{}'.</span>foo<span class="token punctuation">.</span>bas <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// Property 'bas' does not exist on type '{}'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码发出了错误警告，因为 foo 的类型推断为 {}，即是具有零属性的对象。因此，你不能在它的属性上添加 bar 或 bas，可以通过类型断言来避免此问题</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>  bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  bas<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Foo<span class="token punctuation">;</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>bas <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-06-x2F-25分享"><a href="#2022-x2F-06-x2F-25分享" class="headerlink" title="2022/06/25分享"></a>2022/06/25分享</h2><h3 id="TypeScript：类访问修饰符public-private-protected"><a href="#TypeScript：类访问修饰符public-private-protected" class="headerlink" title="TypeScript：类访问修饰符public, private, protected"></a>TypeScript：类访问修饰符public, private, protected</h3><ul><li>public：修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的</li><li>private：修饰的属性或方法是私有的，只能在类的内部进行访问</li><li>protected：修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>owner <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">makeCall</span><span class="token punctuation">(</span>ownerName <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> phoneNumber <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span>     <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ownerName <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span> <span class="token string">"make call to "</span><span class="token punctuation">,</span> phoneNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid owner, can't make call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> owner <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">//定义为private，只能在类的内部进行访问</span><span class="token punctuation">}</span> <span class="token keyword">let</span> aPhone<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">"XiaoMing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    aPhone<span class="token punctuation">.</span><span class="token function">makeCall</span><span class="token punctuation">(</span><span class="token string">"XiaoMing"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：XiaoMing make call to  12345</span>aPhone<span class="token punctuation">.</span><span class="token function">makeCall</span><span class="token punctuation">(</span><span class="token string">"XiaoHong"</span><span class="token punctuation">,</span> <span class="token string">"67890"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：Invalid owner, can't make call</span>aPhone<span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token string">"XiaoHong"</span><span class="token punctuation">;</span>            <span class="token comment">//在类的外部无法对owner进行访问，输出：Property 'owner' is private and only accessible within class 'Phone'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javascript </tag>
            
            <tag> vue3 </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/06/13-2022/06/17组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-06-x2F-13分享"><a href="#2022-x2F-06-x2F-13分享" class="headerlink" title="2022/06/13分享"></a>2022/06/13分享</h2><h3 id="路由组件keep-alive区别"><a href="#路由组件keep-alive区别" class="headerlink" title="路由组件keep-alive区别"></a>路由组件keep-alive区别</h3><h4 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h4><img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/1.png" class=""><h4 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h4><img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/2.png" class=""><p>(注意组件name定义，以及setup语法糖问题)</p><h2 id="2022-x2F-06-x2F-14分享"><a href="#2022-x2F-06-x2F-14分享" class="headerlink" title="2022/06/14分享"></a>2022/06/14分享</h2><p>vue3动态ref使用（常见于v-for生成的表单或其他组件，用于获取组件实例）：</p><img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/3.png" class=""><img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/4.png" class=""><img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/5.png" class=""><h2 id="2022-x2F-06-x2F-15分享"><a href="#2022-x2F-06-x2F-15分享" class="headerlink" title="2022/06/15分享"></a>2022/06/15分享</h2><h3 id="vue3：setup语法糖-amp-setup钩子函数的用法区别及使用场景"><a href="#vue3：setup语法糖-amp-setup钩子函数的用法区别及使用场景" class="headerlink" title="vue3：setup语法糖&amp;setup钩子函数的用法区别及使用场景"></a>vue3：setup语法糖&amp;setup钩子函数的用法区别及使用场景</h3><h5 id="语法糖："><a href="#语法糖：" class="headerlink" title="语法糖："></a>语法糖：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>reactive<span class="token punctuation">,</span>defineProps<span class="token punctuation">,</span>defineEmits<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> emitList <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'handleNodeClick'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleNodeClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">emitList</span><span class="token punctuation">(</span><span class="token string">'gatewayData'</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="setup钩子："><a href="#setup钩子：" class="headerlink" title="setup钩子："></a>setup钩子：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"handleNodeClick"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token function-variable function">handleNodeClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'gatewayData'</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>        handleNodeClick        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>使用setup语法糖，引用组件不需要注册，定义ref&amp;reactive也不需要return，可直接在template使用；</p><p> setup语法糖中，无法定义组件name（可以使用两个script标签，但不推荐），需要keep-alive的组件尽量使用setup钩子写法（对应2022/06/13 keep-alive的分享）;</p><h3 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h3><p> emit  OR  emits</p><h2 id="2022-x2F-06-x2F-16分享"><a href="#2022-x2F-06-x2F-16分享" class="headerlink" title="2022/06/16分享"></a>2022/06/16分享</h2><h3 id="vue3-ts"><a href="#vue3-ts" class="headerlink" title="vue3+ts"></a>vue3+ts</h3><p> 组件setup接收参数，使用interface为props定义泛型</p> <img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/6.png" class=""><h2 id="2022-x2F-06-x2F-17分享"><a href="#2022-x2F-06-x2F-17分享" class="headerlink" title="2022/06/17分享"></a>2022/06/17分享</h2><h3 id="vue3-子组件ref变量和defineExpose"><a href="#vue3-子组件ref变量和defineExpose" class="headerlink" title="vue3 子组件ref变量和defineExpose"></a>vue3 子组件ref变量和defineExpose</h3><p>  在标准组件写法里，子组件的数据都是默认隐式暴露给父组件的，但在 script-setup 模式下，所有数据只是默认 return 给template 使用，不会暴露到组件外，所以父组件是无法直接通过挂载 ref 变量获取子组件的数据。</p><p>  在标准组件写法里，子组件的数据都是默认隐式暴露给父组件的，但在 script-setup 模式下，所有数据只是默认 return 给template 使用，不会暴露到组件外，所以父组件是无法直接通过挂载 ref 变量获取子组件的数据。</p><h5 id="子组件："><a href="#子组件：" class="headerlink" title="子组件："></a>子组件：</h5>   <img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/7.png" class=""><h5 id="父组件："><a href="#父组件：" class="headerlink" title="父组件："></a>父组件：</h5>   <img src="/lsyBlog/2022/07/18/share/2022/june/3-thirdweek/8.png" class="">]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javascript </tag>
            
            <tag> vue3 </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/06/06-2022/06/10组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/june/2-secondweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-06-x2F-06分享"><a href="#2022-x2F-06-x2F-06分享" class="headerlink" title="2022/06/06分享"></a>2022/06/06分享</h2><p>vue2中，列表渲染的时候，不建议v-for与v-if一起使用，如若有此需要，需要使用机算属性，过滤一下列表数据</p><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/1.png" class=""><h2 id="2022-x2F-06-x2F-07分享"><a href="#2022-x2F-06-x2F-07分享" class="headerlink" title="2022/06/07分享"></a>2022/06/07分享</h2><p>vue中，v-on可以绑定多个事件</p><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/2.png" class=""><h2 id="2022-x2F-06-x2F-08分享"><a href="#2022-x2F-06-x2F-08分享" class="headerlink" title="2022/06/08分享"></a>2022/06/08分享</h2><h3 id="forEach如何跳出循环"><a href="#forEach如何跳出循环" class="headerlink" title="forEach如何跳出循环"></a>forEach如何跳出循环</h3><p>利用try catch</p><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/3.png" class=""><h2 id="2022-x2F-06-x2F-09分享"><a href="#2022-x2F-06-x2F-09分享" class="headerlink" title="2022/06/09分享"></a>2022/06/09分享</h2><h3 id="vue开发中巧用template"><a href="#vue开发中巧用template" class="headerlink" title="vue开发中巧用template"></a>vue开发中巧用template</h3><p>这样可以少嵌套一层元素</p><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/4.png" class=""><p>在template上使用v-for指令，还能解决 v-for 和 v-if 同时使用报出的警告问题</p><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/5.png" class=""><h2 id="2022-x2F-06-x2F-10分享"><a href="#2022-x2F-06-x2F-10分享" class="headerlink" title="2022/06/10分享"></a>2022/06/10分享</h2><h3 id="on-‘hook-’-的使用"><a href="#on-‘hook-’-的使用" class="headerlink" title="$on(‘hook:’)的使用"></a>$on(‘hook:’)的使用</h3><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/6.png" class=""><img src="/lsyBlog/2022/07/18/share/2022/june/2-secondweek/7.png" class=""><p>创建定时器和销毁定时器的方法不放在一起，不方便维护，容易忘记清除这个定时器，可以用$on(‘hook:’)来监听beforeDestory生命周期来销毁定时器</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/5/30-2022/06/02组内分享</title>
      <link href="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/"/>
      <url>/lsyBlog/2022/07/18/share/2022/june/1-firstweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-05-x2F-30分享"><a href="#2022-x2F-05-x2F-30分享" class="headerlink" title="2022/05/30分享"></a>2022/05/30分享</h2><h3 id="iview控制表单项显示与隐藏"><a href="#iview控制表单项显示与隐藏" class="headerlink" title="iview控制表单项显示与隐藏"></a>iview控制表单项显示与隐藏</h3><p>最佳方式在FormItem外层增加div 增加v-if</p><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/1.png" class=""><p>直接在FormItem上增加v-if，可能会导致验证信息不能及时隐藏</p><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/2.png" class=""><h2 id="2022-x2F-05-x2F-31分享"><a href="#2022-x2F-05-x2F-31分享" class="headerlink" title="2022/05/31分享"></a>2022/05/31分享</h2><h3 id="异步函数-async-await-的正确使用"><a href="#异步函数-async-await-的正确使用" class="headerlink" title="异步函数(async await)的正确使用"></a>异步函数(async await)的正确使用</h3><p>await后跟promise对象可以返回promise对象resolve和reject的结果</p><p>捕获异常直接对await语句加try catch</p><h5 id="正确使用"><a href="#正确使用" class="headerlink" title="正确使用"></a>正确使用</h5><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/3.png" class=""><h5 id="错误使用"><a href="#错误使用" class="headerlink" title="错误使用"></a>错误使用</h5><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/4.png" class=""><h2 id="2022-x2F-06-x2F-01分享"><a href="#2022-x2F-06-x2F-01分享" class="headerlink" title="2022/06/01分享"></a>2022/06/01分享</h2><h3 id="package-json中包版本号说明"><a href="#package-json中包版本号说明" class="headerlink" title="package.json中包版本号说明"></a>package.json中包版本号说明</h3><ul><li>‘2.1.1’   表示安装指定的版本号，也就是安装2.1.1版本。</li><li>‘~2.1.1’ 表示安装2.1.x的最新版本，安装时不改变大版本号和次要版本号。</li><li>‘^2.1.1’  表示安装2.x.x的最新版本，安装时不改变大版本号</li></ul><p>现在项目中普遍用到的是第3种</p><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/5.png" class=""><h2 id="2022-x2F-06-x2F-02分享"><a href="#2022-x2F-06-x2F-02分享" class="headerlink" title="2022/06/02分享"></a>2022/06/02分享</h2><p>后端微服务架构简单介绍，方便和后端沟通接口问题网关为单独的微服务，所有的业务微服务都挂在网关上，</p><p>404排除URL地址拼写错误，一般为业务服务在网关上的挂载问题。</p><p>500一般为实际业务服务报错或依赖服务报错。</p><img src="/lsyBlog/2022/07/18/share/2022/june/1-firstweek/6.png" class="">]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javascript </tag>
            
            <tag> 网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便记记</title>
      <link href="/lsyBlog/2022/07/16/handynotes/1.note/"/>
      <url>/lsyBlog/2022/07/16/handynotes/1.note/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随手记记，方便回忆</p></blockquote><h5 id="hexo发布静态资源"><a href="#hexo发布静态资源" class="headerlink" title="hexo发布静态资源"></a>hexo发布静态资源</h5><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo <span class="token keyword">d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="hexo生成文件"><a href="#hexo生成文件" class="headerlink" title="hexo生成文件"></a>hexo生成文件</h5><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">hexo <span class="token keyword">n</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="windows下解压tar-gz文件"><a href="#windows下解压tar-gz文件" class="headerlink" title="windows下解压tar.gz文件"></a>windows下解压tar.gz文件</h5><blockquote><ol><li>搜索Windows PowerShell并打开</li><li>cd 到压缩文件所在文件夹</li><li>然后使用命令 tar -zxvf 要解压的文件名</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/7/18-2022/7/23组内分享</title>
      <link href="/lsyBlog/2022/07/16/share/2022/july/3-thirdweek/"/>
      <url>/lsyBlog/2022/07/16/share/2022/july/3-thirdweek/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-x2F-07-x2F-18分享"><a href="#2022-x2F-07-x2F-18分享" class="headerlink" title="2022/07/18分享"></a>2022/07/18分享</h2><h3 id="空值合并操作符（-）"><a href="#空值合并操作符（-）" class="headerlink" title="空值合并操作符（??）"></a>空值合并操作符（??）</h3><p>空值合并操作符（??）是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。</p><p>与逻辑或操作符（||）不同，逻辑或操作符是左边是空字符串或false或0等false值，都会返回后侧的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">'default string'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: "default string"</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">42</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用空值合并操作符"><a href="#使用空值合并操作符" class="headerlink" title="使用空值合并操作符"></a>使用空值合并操作符</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nullValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">const</span> emptyText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 空字符串，是一个假值，Boolean("") === false</span><span class="token keyword">const</span> someNumber <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">const</span> valA <span class="token operator">=</span> nullValue <span class="token operator">??</span> <span class="token string">"valA 的默认值"</span><span class="token punctuation">;</span><span class="token keyword">const</span> valB <span class="token operator">=</span> emptyText <span class="token operator">??</span> <span class="token string">"valB 的默认值"</span><span class="token punctuation">;</span><span class="token keyword">const</span> valC <span class="token operator">=</span> someNumber <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "valA 的默认值"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ""（空字符串虽然是假值，但不是 null 或者 undefined）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为变量赋默认值"><a href="#为变量赋默认值" class="headerlink" title="为变量赋默认值"></a>为变量赋默认值</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo<span class="token punctuation">;</span><span class="token comment">//  foo is never assigned any value so it is still undefined</span><span class="token keyword">let</span> someDummyText <span class="token operator">=</span> foo <span class="token operator">||</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><img src="/lsyBlog/2022/07/16/share/2022/july/3-thirdweek/1.png" class=""><h2 id="2022-x2F-07-x2F-19分享"><a href="#2022-x2F-07-x2F-19分享" class="headerlink" title="2022/07/19分享"></a>2022/07/19分享</h2><h3 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符 ( ?. )"></a>可选链操作符 ( ?. )</h3><blockquote><p>?.直接在链式调用的时候判断，判断左侧的对象是否为null或undefined，如果是的，就不再往下运算，返回undefined，如果不是，则返回右侧的值。</p></blockquote><p>可以使用?.简化&amp;&amp;和三元运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> street <span class="token operator">=</span> user<span class="token punctuation">.</span>address <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>street<span class="token punctuation">;</span><span class="token comment">// 简化</span><span class="token keyword">let</span> street <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token operator">?.</span>street<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浏览器兼容性-1"><a href="#浏览器兼容性-1" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><img src="/lsyBlog/2022/07/16/share/2022/july/3-thirdweek/2.png" class=""><h2 id="2022-x2F-07-x2F-20分享"><a href="#2022-x2F-07-x2F-20分享" class="headerlink" title="2022/07/20分享"></a>2022/07/20分享</h2><h3 id="使用Array-prototype-at-简化arr-length"><a href="#使用Array-prototype-at-简化arr-length" class="headerlink" title="使用Array.prototype.at()简化arr.length"></a>使用Array.prototype.at()简化arr.length</h3><blockquote><p>at() 方法接收一个整数值并返回该索引的项目，允许正数和负数，表示获取指定位置的成员。<br>参数正数就表示顺数第几个，负整数从数组中的最后一个项目开始倒数。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// 以前获取最后一位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//5</span><span class="token comment">// 简化后</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-07-x2F-21分享"><a href="#2022-x2F-07-x2F-21分享" class="headerlink" title="2022/07/21分享"></a>2022/07/21分享</h2><blockquote><p>css 怎样穿透样式？穿透符能穿透修改 vue #app 节点外元素的样式吗？</p></blockquote><h5 id="v-deep-vue3-0-开始，可使用-v-deep-替代-x2F-deep-x2F"><a href="#v-deep-vue3-0-开始，可使用-v-deep-替代-x2F-deep-x2F" class="headerlink" title="::v-deep vue3.0 开始，可使用 ::v-deep 替代 /deep/"></a>::v-deep vue3.0 开始，可使用 ::v-deep 替代 /deep/</h5><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">&lt;style lang="less" scoped&gt;    ::v-deep .el-input</span> <span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="x2F-deep-x2F-vue2-中可使用-x2F-deep-x2F-穿透样式"><a href="#x2F-deep-x2F-vue2-中可使用-x2F-deep-x2F-穿透样式" class="headerlink" title="/deep/ vue2 中可使用 /deep/ 穿透样式~"></a>/deep/ vue2 中可使用 /deep/ 穿透样式~</h5><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">&lt;style lang="less" scoped&gt;    /deep/ .el-input</span> <span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="gt-gt-gt-仅对-css-有效，对于-css-预处理语言，例如-scss、less-不生效。"><a href="#gt-gt-gt-仅对-css-有效，对于-css-预处理语言，例如-scss、less-不生效。" class="headerlink" title=">>> 仅对 css 有效，对于 css 预处理语言，例如 scss、less 不生效。"></a>&gt;&gt;&gt; 仅对 css 有效，对于 css 预处理语言，例如 scss、less 不生效。</h5><p>对于 vue 中 div#app 节点外的元素样式，如果 ‘’ 加上了 scoped，那么此时样式穿透符是不能穿透修改 div#app 节点外的元素样式的。<br>这是因为 scoped 的作用域仅局限在 div#app 容器内部，所以此时只能修改 div#app 容器内的样式。<br>例如 el 组件的下拉选的弹出层是 div#app 的兄弟元素，body的子元素，在 ‘’ 中使用样式穿透符修改该弹出层的样式是无效的。</p><h2 id="2022-x2F-07-x2F-22分享"><a href="#2022-x2F-07-x2F-22分享" class="headerlink" title="2022/07/22分享"></a>2022/07/22分享</h2><h3 id="JS代码优化技巧（一）"><a href="#JS代码优化技巧（一）" class="headerlink" title="JS代码优化技巧（一）"></a>JS代码优化技巧（一）</h3><h4 id="带有多个条件的-if-语句"><a href="#带有多个条件的-if-语句" class="headerlink" title="带有多个条件的 if 语句"></a>带有多个条件的 if 语句</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 优化之前</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token string">'abc'</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token string">'def'</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token string">'ghi'</span> <span class="token operator">||</span> x <span class="token operator">===</span><span class="token string">'jkl'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 优化之后</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span> <span class="token string">'jkl'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2022-x2F-07-x2F-23分享"><a href="#2022-x2F-07-x2F-23分享" class="headerlink" title="2022/07/23分享"></a>2022/07/23分享</h2><h3 id="JS代码优化技巧（二）"><a href="#JS代码优化技巧（二）" class="headerlink" title="JS代码优化技巧（二）"></a>JS代码优化技巧（二）</h3><h4 id="switch-简化"><a href="#switch-简化" class="headerlink" title="switch 简化"></a>switch 简化</h4><blockquote><p>可以将条件保存在键值对象中，并根据条件来调用它们</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 优化之前</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// 优化之后</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">1</span><span class="token operator">:</span> test1<span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> test2<span class="token punctuation">,</span>  <span class="token number">3</span><span class="token operator">:</span> test<span class="token punctuation">}</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span>something<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>something<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vite和TypeScript带你从零打造一个属于自己的Vue3组件库</title>
      <link href="/lsyBlog/2022/07/15/assembly/01.da-jian-zu-jian-ku/"/>
      <url>/lsyBlog/2022/07/15/assembly/01.da-jian-zu-jian-ku/</url>
      
        <content type="html"><![CDATA[<p>本文将使用Vue3和TypeScript来编写一个组件库，使用Vite+Vue3来对这个组件库中的组件进行调试，最后使用vite来对组件库进行打包并且发布到npm上。最终的产物是一个名为liusy-ui的组件库</p><p>读完这篇文章你将学会：</p><ul><li>如何使用pnpm搭建出一个menorepo环境</li><li>如何使用vite搭建一个基本的Vue3脚手架项目</li><li>如何开发调试一个自己的UI组件库</li><li>如何使用vite打包并发布自己的UI组件库</li></ul><h2 id="menorepo环境"><a href="#menorepo环境" class="headerlink" title="menorepo环境"></a>menorepo环境</h2><p>首先我们要了解什么是menorepo及它是如何搭建的</p><p>就是指在一个大的项目仓库中，管理多个模块/包（package），这种类型的项目大都在项目根目录下有一个packages文件夹，分多个项目管理。大概结构如下：</p><pre class="line-numbers language-none"><code class="language-none">-- packages  -- pkg1    --package.json  -- pkg2    --package.json--package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是单仓库 多项目</p><p>目前很多我们熟知的项目都是采用这种模式，如Vant，ElementUI，Vue3等。打造一个menorepo环境的工具有很多，如：lerna、pnpm、yarn等，这里我们将使用pnpm来开发我们的UI组件库。</p><p>为什么要使用pnpm?</p><p>因为它简单高效，它没有太多杂乱的配置，它相比于lerna操作起来方便太多<br>好了，下面我们就开始用pnpm来进行我们的组件库搭建吧</p><h2 id="使用pnpm"><a href="#使用pnpm" class="headerlink" title="使用pnpm"></a>使用pnpm</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install pnpm <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化package-json"><a href="#初始化package-json" class="headerlink" title="初始化package.json"></a>初始化package.json</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pnpm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="新建配置文件-npmrc"><a href="#新建配置文件-npmrc" class="headerlink" title="新建配置文件 .npmrc"></a>新建配置文件 .npmrc</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">shamefully<span class="token operator">-</span>hoist <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里简单说下为什么要配置shamefully-hoist。</p><p>如果某些工具仅在根目录的node_modules时才有效，可以将其设置为true来提升那些不在根目录的node_modules，就是将你安装的依赖包的依赖包的依赖包的…都放到同一级别（扁平化）。说白了就是不设置为true有些包就有可能会出问题。</p><h2 id="安装对应依赖"><a href="#安装对应依赖" class="headerlink" title="安装对应依赖"></a>安装对应依赖</h2><p>我们开发环境中的依赖一般全部安装在整个项目根目录下，方便下面我们每个包都可以引用,所以在安装的时候需要加个 -w</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pnpm i vue@next typescript less <span class="token operator">-</span><span class="token constant">D</span> <span class="token operator">-</span>w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置tsconfit-json"><a href="#配置tsconfit-json" class="headerlink" title="配置tsconfit.json"></a>配置tsconfit.json</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json">npx tsc --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tsconfig.json:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span>    <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="monorepo的实现"><a href="#monorepo的实现" class="headerlink" title="monorepo的实现"></a>monorepo的实现</h2><p>接下就是pnpm如何实现monorepo的了。</p><p>为了我们各个项目之间能够互相引用我们要新建一个pnpm-workspace.yaml文件将我们的包关联起来</p><pre class="line-numbers language-none"><code class="language-none">packages:    - 'packages/**'    - 'examples'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就能将我们项目下的packages目录和examples目录关联起来了，当然如果你想关联更多目录你只需要往里面添加即可。根据上面的目录结构很显然你在根目录下新packages和examples文件夹，packages文件夹存放我们开发的包，examples用来调试我们的组件。</p><p>examples文件夹就是接下来我们要使用vite搭建一个基本的Vue3脚手架项目的地方</p><h2 id="手动搭建一个基于vite的vue3项目"><a href="#手动搭建一个基于vite的vue3项目" class="headerlink" title="手动搭建一个基于vite的vue3项目"></a>手动搭建一个基于vite的vue3项目</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>进入examples文件夹，执行</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装vite和-vitejs-x2F-plugin-vue"><a href="#安装vite和-vitejs-x2F-plugin-vue" class="headerlink" title="安装vite和@vitejs/plugin-vue"></a>安装vite和@vitejs/plugin-vue</h3><p>@vitejs/plugin-vue用来支持.vue文件的转译</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm install vite @vitejs<span class="token operator">/</span>plugin<span class="token operator">-</span>vue <span class="token operator">-</span>D <span class="token operator">-</span><span class="token keyword">w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置vite-config-ts"><a href="#配置vite-config-ts" class="headerlink" title="配置vite.config.ts"></a>配置vite.config.ts</h3><p>新建vite.config.ts</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建html文件"><a href="#新建html文件" class="headerlink" title="新建html文件"></a>新建html文件</h3><p>@vitejs/plugin-vue 会默认加载examples下的index.html</p><p>新建index.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.ts<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： vite 是基于esmodule的 所以type=”module”</p><h3 id="新建app-vue模板"><a href="#新建app-vue模板" class="headerlink" title="新建app.vue模板"></a>新建app.vue模板</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        启动测试    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建main-ts"><a href="#新建main-ts" class="headerlink" title="新建main.ts"></a>新建main.ts</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./app.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时会发现编译器会提示个错误：找不到模块“./app.vue”或其相应的类型声明。</p><p>因为直接引入.vue文件 TS会找不到对应的类型声明；所以需要新建typings（命名没有明确规定，TS会自动寻找.d.ts文件）文件夹来专门放这些声明文件。</p><p>typings/vue-shim.d.ts</p><p>TypeScriptTS默认只认ES 模块。如果你要导入.vue文件就要declare module把他们声明出来。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'*.vue'</span> <span class="token punctuation">{</span>    <span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> component<span class="token operator">:</span>DefineComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置脚本启动项目"><a href="#配置脚本启动项目" class="headerlink" title="配置脚本启动项目"></a>配置脚本启动项目</h3><p>最后在package.json文件中配置scripts脚本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后终端输入我们熟悉的命令：pnpm run dev</p><p>vite启动默认端口为3000；在浏览器中打开localhost:3000 就会看我们的“启动测试”页面。</p><h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><h3 id="新建包文件"><a href="#新建包文件" class="headerlink" title="新建包文件"></a>新建包文件</h3><p>本节可能和目前组件的开发关联不大，但是未来组件需要引入一些工具方法的时候会用到。</p><p>接下来就是要往我们的packages文件夹冲填充内容了。</p><h5 id="utils包"><a href="#utils包" class="headerlink" title="utils包"></a>utils包</h5><p>一般packages要有utils包来存放我们公共方法，工具函数等<br>既然它是一个包，所以我们新建utils目录后就需要初始化它，让它变成一个包；终端进入utils文件夹执行：pnpm init 然后会生成一个package.json文件；这里需要改一下包名，我这里将name改成@liusy-ui/utils表示这个utils包是属于liusy-ui这个组织下的。所以记住发布之前要登录npm新建一个组织；例如liusy-ui</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@liusy-ui/utils"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.ts"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们使用ts写的，所以需要将入口文件index.js改为index.ts，并新建index.ts文件:(先导出一个简单的加法函数)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> testfun <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="组件库包-这里命名为liusy-ui"><a href="#组件库包-这里命名为liusy-ui" class="headerlink" title="组件库包(这里命名为liusy-ui)"></a>组件库包(这里命名为liusy-ui)</h5><p>components是我们用来存放各种UI组件的包</p><p>新建components文件夹并执行 pnpm init 生成package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"liusy-ui"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.ts"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建index.ts入口文件并引入utils包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>testfun<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@liusy-ui/utils'</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testfun</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="esno"><a href="#esno" class="headerlink" title="esno"></a>esno</h5><p>由于组件库是基于ts的，所以需要安装esno来执行ts文件便于测试组件之间的引入情况</p><p>控制台输入esno xxx.ts即可执行ts文件</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">npm i esno <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="包之间本地调试"><a href="#包之间本地调试" class="headerlink" title="包之间本地调试"></a>包之间本地调试</h3><p>进入components文件夹执行</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm install @liusy<span class="token operator">-</span>ui<span class="token operator">/</span>utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现pnpm会自动创建个软链接直接指向我们的utils包；此时components下的packages：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"liusy-ui"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"src/index.ts"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@liusy-ui/utils"</span><span class="token operator">:</span> <span class="token string">"workspace:^1.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现它的依赖@liusy-ui/utils对应的版本为：workspace:^1.0.0；因为pnpm是由workspace管理的，所以有一个前缀workspace可以指向utils下的工作空间从而方便本地调试各个包直接的关联引用。</p><p>到这里基本开发方法我们已经知道啦；接下来就要进入正题了，开发一个button组件</p><h2 id="试着开发一个button组件"><a href="#试着开发一个button组件" class="headerlink" title="试着开发一个button组件"></a>试着开发一个button组件</h2><p>在components文件夹下新建src,同时在src下新建button组件目录和icon组件目录(新建icon为了便于调试);此时components文件目录如下</p><pre class="line-numbers language-none"><code class="language-none">-- components  -- src    -- button    -- icon    -- index.ts-- package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们先测试一下我们的button组件能否在我们搭建的examples下的vue3项目本引用~</p><p>首先在button下新建一个简单的button.vue</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在button/index.ts将其导出</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'./button.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> Button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为我们开发组件库的时候不可能只有button，所以我们需要一个components/index.ts将我们开发的组件一个个的集中导出</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'./button'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    Button<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，一个组件的大体目录差不多就是这样了，接下来请进入我们的examples来看看能否引入我们的button组件</p><h2 id="vue3项目使用button"><a href="#vue3项目使用button" class="headerlink" title="vue3项目使用button"></a>vue3项目使用button</h2><p>上面已经说过执行在workspace执行 pnpm i xxx的时候pnpm会自动创建个软链接直接指向我们的xxx包。</p><p>所以这里我们直接在examples执行：pnpm i liusy-ui</p><p>此时你就会发现packages.json的依赖多了个</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"liusy-ui"</span><span class="token operator">:</span> <span class="token string">"workspace:^1.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候我们就能直接在我们的测试项目下引入我们本地的components组件库了，启动我们的测试项目，来到我们的 examples/app.vue 直接引入Button</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'liusy-ui'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不出意外的话你的页面就会展示我们刚刚写的button组件了</p><p>好了万事具…(其实还差个打包，这个后面再说~)；接下来的工作就是专注于组件的开发了；让我们回到我们的button组件目录下（测试页面不用关，此时我们已经可以边开发边调试边看效果了）</p><p>因为我们的button组件是需要接收很多属性的，如type、size等等，所以我们要新建个types.ts文件来规范这些属性</p><p>在button目录下新建types.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtractPropTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">const</span> ButtonType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token string">'primary'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">const</span> ButtonSize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'mini'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> buttonProps <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token punctuation">{</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    values<span class="token operator">:</span> ButtonType  <span class="token punctuation">}</span><span class="token punctuation">,</span>  size<span class="token operator">:</span> <span class="token punctuation">{</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    values<span class="token operator">:</span> ButtonSize  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ButtonProps</span> <span class="token operator">=</span> ExtractPropTypes<span class="token operator">&lt;</span><span class="token keyword">typeof</span> buttonProps<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>TIPS</em></p><p>import type 表示只导入类型；ExtractPropTypes是vue3中内置的类型声明,它的作用是接收一个类型，然后把对应的vue3所接收的props类型提供出来，后面有需要可以直接使用</p><p>很多时候我们在vue中使用一个组件会用的app.use 将组件挂载到全局。要使用app.use函数的话我们需要让我们的每个组件都提供一个install方法，app.use()的时候就会调用这个方法;</p><p>我们将button/index.ts调整为</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> button <span class="token keyword">from</span> <span class="token string">'./button.vue'</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>App<span class="token punctuation">,</span>Plugin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">type</span> <span class="token class-name">SFCWithInstall<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&amp;</span>Plugin<span class="token keyword">const</span> withInstall <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>comp<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>comp <span class="token keyword">as</span> SFCWithInstall<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token operator">:</span>App<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">//注册组件</span>        app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">(</span>comp <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>comp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> comp <span class="token keyword">as</span> SFCWithInstall<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">withInstall</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以使用app.use来挂载我们的组件啦</p><p>其实withInstall方法可以做个公共方法放到工具库里，因为后续每个组件都会用到，这里等后面开发组件的时候再调整</p><p>到这里组件开发的基本配置已经完成，最后我们对我们的组件库以及工具库进行打包，打包之前如果要发公共包的话记得将我们的各个包的协议改为MIT开源协议</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...<span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="vite打包"><a href="#vite打包" class="headerlink" title="vite打包"></a>vite打包</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>打包们这里选择vite，它有一个库模式专门为我们来打包这种库组件的。</p><p>前面已经安装过vite了，所以这里直接在components下直接新建vite.config.ts(配置参数文件中已经注释):</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        build<span class="token operator">:</span> <span class="token punctuation">{</span>            target<span class="token operator">:</span> <span class="token string">'modules'</span><span class="token punctuation">,</span>            <span class="token comment">//打包文件目录</span>            outDir<span class="token operator">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>            <span class="token comment">//压缩</span>            minify<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment">//css分离</span>            <span class="token comment">//cssCodeSplit: true,</span>            rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment">//忽略打包vue文件</span>                external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'src/index.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                output<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        format<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>                        <span class="token comment">//不用打包成.es.js,这里我们想把它打包成.js</span>                        entryFileNames<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>                        <span class="token comment">//让打包目录和我们目录对应</span>                        preserveModules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">//配置打包根目录</span>                        dir<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>                        preserveModulesRoot<span class="token operator">:</span> <span class="token string">'src'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        format<span class="token operator">:</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span>                        entryFileNames<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>                        <span class="token comment">//让打包目录和我们目录对应</span>                        preserveModules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">//配置打包根目录</span>                        dir<span class="token operator">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>                        preserveModulesRoot<span class="token operator">:</span> <span class="token string">'src'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            lib<span class="token operator">:</span> <span class="token punctuation">{</span>                entry<span class="token operator">:</span> <span class="token string">'./index.ts'</span><span class="token punctuation">,</span>                formats<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es'</span><span class="token punctuation">,</span> <span class="token string">'cjs'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们选择打包cjs(CommonJS)和esm(ESModule)两种形式,cjs模式主要用于服务端引用(ssr),而esm就是我们现在经常使用的方式，它本身自带treeShaking而不需要额外配置按需引入(前提是你将模块分别导出)，非常好用~</p><p>其实到这里就已经可以直接打包了；components下执行： pnpm run build你就会发现打包了es和lib两个目录</p><p>到这里其实打包的组件库只能给js项目使用,在ts项目下运行会出现一些错误，而且使用的时候还会失去代码提示功能，这样的话我们就失去了用ts开发组件库的意义了。所以我们需要在打包的库里加入声明文件(.d.ts)。</p><p>那么如何向打包后的库里加入声明文件呢？ 其实很简单，只需要引入vite-plugin-dts</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>dts <span class="token operator">-</span>D <span class="token operator">-</span><span class="token keyword">w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改一下我们的vite.config.ts引入这个插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token keyword">import</span> dts <span class="token keyword">from</span> <span class="token string">'vite-plugin-dts'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">dts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">//指定使用的tsconfig.json为我们整个项目根目录下掉,如果不配置,你也可以在components下新建tsconfig.json</span>                <span class="token literal-property property">tsConfigFilePath</span><span class="token operator">:</span> <span class="token string">'../../tsconfig.json'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">//因为这个插件默认打包到es下，我们想让lib目录下也生成声明文件需要再配置一个</span>            <span class="token function">dts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">outputDir</span><span class="token operator">:</span><span class="token string">'lib'</span><span class="token punctuation">,</span>                <span class="token literal-property property">tsConfigFilePath</span><span class="token operator">:</span> <span class="token string">'../../tsconfig.json'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这个插件默认打包到es下，我们想让lib目录下也生成声明文件需要再配置一个dts插件，暂时没有想到其它更好的处理方法~</p><p>然后执行打包命令你就会发现你的es和lib下就有了声明文件</p><p>其实后面就可以进行发布了，发布之前更改一下我们components下的package.json如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"liusy-ui"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span><span class="token string">"es/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"es"</span><span class="token punctuation">,</span>    <span class="token string">"lib"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"liusy-ui"</span><span class="token punctuation">,</span>    <span class="token string">"vue3组件库"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"夏"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"typings"</span><span class="token operator">:</span> <span class="token string">"lib/index.d.ts"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释一下里面部分字段</p><p><em>pkg.module</em></p><p>我们组件库默认入口文件是传统的CommonJS模块，但是如果你的环境支持ESModule的话，构建工具会优先使用我们的module入口</p><p><em>pkg.files</em></p><p>files是指我们1需要发布到npm上的目录，因为不可能components下的所有目录都被发布上去</p><h2 id="开始发布"><a href="#开始发布" class="headerlink" title="开始发布"></a>开始发布</h2><p>做了那么多终于到发布的阶段了；其实npm发包是很容易的，就拿我们的组件库liusy-ui举例吧</p><p>发布之前记得到npm官网注册个账户,如果你要发布@xx/xx这种包的话需要在npm新建个组织组织组织名就是@后面的，比如我建的组织就是liusy-ui,注册完之后你就可以发布了</p><p>首先要将我们代码提交到git仓库，不然pnpm发布无法通过，后面每次发版记得在对应包下执行 pnpm version patch你就会发现这个包的版本号patch(版本号第三个数) +1 了，同样的 pnpm version major major和 pnpm version minor 分别对应版本号的第一和第二位增加。</p><p>如果你发布的是公共包的话，在对应包下执行</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm publish <span class="token operator">-</span><span class="token operator">-</span>access public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入你的账户和密码（记得输入密码的时候是不显示的，不要以为卡了）正常情况下应该是发布成功了</p><p><em>注意</em></p><p>发布的时候要将npm的源切换到npm的官方地址(registry.npmjs.org/); 如果你使用了其它镜像源的话会发布不上去；</p><h2 id="样式问题"><a href="#样式问题" class="headerlink" title="样式问题"></a>样式问题</h2><p>引入我们打包后的组件你会发现没有样式，所以你需要在全局引入我们的style.css才行；如 main.ts中需要</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">'liusy-ui/es/style.css'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很显然这种组件库并不是我们想要的，我们需要的组件库是每个css样式放在每个组件其对应目录下，这样就不需要每次都全量导入我们的css样式。</p><p>下面就让我们来看下如何把样式拆分打包</p><h3 id="处理less文件"><a href="#处理less文件" class="headerlink" title="处理less文件"></a>处理less文件</h3><p>首先我们需要做的是将less打包成css然后放到打包后对应的文件目录下,我们在components下新建build文件夹来存放我们的一些打包工具,然后新建buildLess.ts,首先我们需要先安装一些工具cpy和fast-glob</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm i cpy fast<span class="token operator">-</span>glob <span class="token operator">-</span>D <span class="token operator">-</span><span class="token keyword">w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="cpy"><a href="#cpy" class="headerlink" title="cpy"></a>cpy</h5><p>它可以直接复制我们规定的文件并将我们的文件copy到指定目录,比如buildLess.ts:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> cpy <span class="token keyword">from</span> <span class="token string">'cpy'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">const</span> sourceDir <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span><span class="token comment">//lib文件</span><span class="token keyword">const</span> targetLib <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../lib'</span><span class="token punctuation">)</span><span class="token comment">//es文件</span><span class="token keyword">const</span> targetEs <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../es'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">buildLess</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">cpy</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourceDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**/*.less</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> targetLib<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">cpy</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourceDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**/*.less</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> targetEs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">buildLess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在package.json中新增命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span><span class="token punctuation">,</span>    <span class="token property">"build:less"</span><span class="token operator">:</span> <span class="token string">"esno build/buildLess"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端执行 pnpm run build:less 你就会发现lib和es文件对应目录下就出现了less文件.</p><p>但是我们最终要的并不是less文件而是css文件,所以我们要将less打包成css,所以我们需要用的less模块.在ts中引入less因为它本身没有声明文件所以会出现类型错误,所以我们要先安装它的 @types/less</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">pnpm i <span class="token operator">-</span><span class="token operator">-</span>save<span class="token operator">-</span>dev @types<span class="token operator">/</span>less <span class="token operator">-</span>D <span class="token operator">-</span><span class="token keyword">w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>buildLess.ts如下(详细注释都在代码中)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> cpy <span class="token keyword">from</span> <span class="token string">'cpy'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> promises <span class="token keyword">as</span> fs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">"less"</span><span class="token keyword">import</span> glob <span class="token keyword">from</span> <span class="token string">"fast-glob"</span><span class="token keyword">const</span> sourceDir <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span><span class="token comment">//lib文件目录</span><span class="token keyword">const</span> targetLib <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../lib'</span><span class="token punctuation">)</span><span class="token comment">//es文件目录</span><span class="token keyword">const</span> targetEs <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../es'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">buildLess</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//直接将less文件复制到打包后目录</span>    <span class="token keyword">await</span> <span class="token function">cpy</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourceDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**/*.less</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> targetLib<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">cpy</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourceDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**/*.less</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> targetEs<span class="token punctuation">)</span>    <span class="token comment">//获取打包后.less文件目录(lib和es一样)</span>    <span class="token keyword">const</span> lessFils <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"**/*.less"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd<span class="token operator">:</span> targetLib<span class="token punctuation">,</span> onlyFiles<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//遍历含有less的目录</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> path <span class="token keyword">in</span> lessFils<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> lessPathLib <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>targetLib<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lessFils<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>        <span class="token keyword">const</span> lessPathEs <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>targetEs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lessFils<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>        <span class="token comment">//获取less文件字符串</span>        <span class="token keyword">const</span> lessCode <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>lessPathLib<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token comment">//将less解析成css</span>        <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">await</span> less<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>lessCode<span class="token punctuation">)</span>        <span class="token comment">//拿到.css后缀path</span>        <span class="token keyword">const</span> cssPathLib <span class="token operator">=</span> lessPathLib<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.less'</span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> cssPathEs <span class="token operator">=</span> lessPathEs<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.less'</span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">)</span>        <span class="token comment">//将css写入对应目录</span>        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>cssPathLib<span class="token punctuation">,</span> code<span class="token punctuation">.</span>css<span class="token punctuation">)</span>        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>cssPathEs<span class="token punctuation">,</span> code<span class="token punctuation">.</span>css<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">buildLess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行打包命令之后你会发现对应文件夹下多了.css文件</p><p>现在我已经将css文件放入对应的目录下了,但是我们的相关组件并没有引入这个css文件;所以我们需要的是每个打包后组件的index.js中出现如:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"xxx/xxx.css"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之类的代码我们的css才会生效;所以我们需要对vite.config.ts进行相关配置</p><p>首先我们先将.less文件忽略**external: [‘vue’, /.less/],**这时候打包后的文件中如button/index.js就会出现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"./style/index.less"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们再将打包后代码的.less换成.css就大功告成了</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">...</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token operator">...</span>            <span class="token punctuation">{</span>                name<span class="token operator">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span>                <span class="token function">generateBundle</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//这里可以获取打包后的文件目录以及代码code</span>                    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> bundler<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> bundle<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">]</span>                        <span class="token comment">//rollup内置方法,将所有输出文件code中的.less换成.css,因为我们当时没有打包less文件</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            type<span class="token operator">:</span> <span class="token string">'asset'</span><span class="token punctuation">,</span>                            fileName<span class="token operator">:</span> key<span class="token punctuation">,</span><span class="token comment">//文件名名不变</span>                            source<span class="token operator">:</span> bundler<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token operator">...</span>        <span class="token punctuation">]</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们最终的vite.config.ts如下</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token keyword">import</span> dts <span class="token keyword">from</span> <span class="token string">'vite-plugin-dts'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        build<span class="token operator">:</span> <span class="token punctuation">{</span>            target<span class="token operator">:</span> <span class="token string">'modules'</span><span class="token punctuation">,</span>            <span class="token comment">//打包文件目录</span>            outDir<span class="token operator">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>            <span class="token comment">//压缩</span>            minify<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment">//css分离</span>            <span class="token comment">//cssCodeSplit: true,</span>            rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment">//忽略打包vue和.less文件</span>                external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'src/index.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                output<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        format<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>                        <span class="token comment">//不用打包成.es.js,这里我们想把它打包成.js</span>                        entryFileNames<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>                        <span class="token comment">//让打包目录和我们目录对应</span>                        preserveModules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">//配置打包根目录</span>                        dir<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>                        preserveModulesRoot<span class="token operator">:</span> <span class="token string">'src'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        format<span class="token operator">:</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span>                        <span class="token comment">//不用打包成.mjs</span>                        entryFileNames<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>                        <span class="token comment">//让打包目录和我们目录对应</span>                        preserveModules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">//配置打包根目录</span>                        dir<span class="token operator">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>                        preserveModulesRoot<span class="token operator">:</span> <span class="token string">'src'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            lib<span class="token operator">:</span> <span class="token punctuation">{</span>                entry<span class="token operator">:</span> <span class="token string">'./index.ts'</span><span class="token punctuation">,</span>                formats<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es'</span><span class="token punctuation">,</span> <span class="token string">'cjs'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">dts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">//指定使用的tsconfig.json为我们整个项目根目录下掉,如果不配置,你也可以在components下新建tsconfig.json</span>                tsConfigFilePath<span class="token operator">:</span> <span class="token string">'../../tsconfig.json'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">//因为这个插件默认打包到es下，我们想让lib目录下也生成声明文件需要再配置一个</span>            <span class="token function">dts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                outputDir<span class="token operator">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>                tsConfigFilePath<span class="token operator">:</span> <span class="token string">'../../tsconfig.json'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token operator">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span>                <span class="token function">generateBundle</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//这里可以获取打包后的文件目录以及代码code</span>                    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> bundler<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> bundle<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">]</span>                        <span class="token comment">//rollup内置方法,将所有输出文件code中的.less换成.css,因为我们当时没有打包less文件</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            type<span class="token operator">:</span> <span class="token string">'asset'</span><span class="token punctuation">,</span>                            fileName<span class="token operator">:</span> key<span class="token punctuation">,</span><span class="token comment">//文件名名不变</span>                            source<span class="token operator">:</span> bundler<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们将打包less与打包组件合成一个命令(package.json):</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build &amp; esno build/buildLess"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后续直接执行pnpm run build 即可完成所有打包啦</p>]]></content>
      
      
      <categories>
          
          <category> 组件库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 组件库 </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
